// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'src/models/bag.dart';
import 'src/models/item.dart';
import 'src/models/parking.dart';
import 'src/models/parking_space.dart';
import 'src/models/person.dart';
import 'src/models/vehicle.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5734646974315608523),
      name: 'Bag',
      lastPropertyId: const obx_int.IdUid(3, 5912940655653160131),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2913043497242712178),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6977688743717899067),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5912940655653160131),
            name: 'itemsInDb',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8451282599434045579),
      name: 'Item',
      lastPropertyId: const obx_int.IdUid(2, 7672144424753055690),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5284212236574591023),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7672144424753055690),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6361105331499020977),
      name: 'Person',
      lastPropertyId: const obx_int.IdUid(10, 8453192963093825079),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1896031891015238284),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5553561847851411563),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7212588147923256981),
            name: 'ssn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8453192963093825079),
            name: 'itemsInDb',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 6322958116010445661),
      name: 'ParkingSpace',
      lastPropertyId: const obx_int.IdUid(3, 5608482441508257846),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2069394012398517009),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8195065975246932491),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5608482441508257846),
            name: 'pricePerHour',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4947039560727772286),
      name: 'Parking',
      lastPropertyId: const obx_int.IdUid(5, 7589300267080396296),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1690024171666092378),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5729697005842833787),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4746023821207332868),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5072189699137887170),
            name: 'vehicleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 8277506376588452714),
            relationTarget: 'Vehicle'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7589300267080396296),
            name: 'parkingSpaceId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 3842738552290414629),
            relationTarget: 'ParkingSpace')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 4611544989560169149),
      name: 'Vehicle',
      lastPropertyId: const obx_int.IdUid(4, 84680324938044488),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4364822756144415362),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8401002822898253351),
            name: 'licensePlate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5634770877231478866),
            name: 'vehicleType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 84680324938044488),
            name: 'ownerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 7374945224662159398),
            relationTarget: 'Person')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 4611544989560169149),
      lastIndexId: const obx_int.IdUid(6, 7374945224662159398),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        6539104271398186167,
        1555128805293743242,
        9175493719539538660
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7626779877698590705,
        1141262634202698580,
        6582545937594582363,
        2542133461562607578,
        1496041229761913517,
        522273590172272964,
        9028780978659742119,
        1596206338814084163,
        3292283472779470667,
        1157594897086140100,
        9192696004812464997,
        167578117808558176,
        4793760092919054410,
        2495136290426339426,
        4576736229213416591,
        1748614264573016617,
        4059034261802048682,
        3461774580256256743
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Bag: obx_int.EntityDefinition<Bag>(
        model: _entities[0],
        toOneRelations: (Bag object) => [],
        toManyRelations: (Bag object) => {},
        getId: (Bag object) => object.id,
        setId: (Bag object, int id) {
          object.id = id;
        },
        objectToFB: (Bag object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final itemsInDbOffset = fbb.writeString(object.itemsInDb);
          fbb.startTable(4);
          fbb.addOffset(0, descriptionOffset);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, itemsInDbOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 4, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Bag(description: descriptionParam, id: idParam)
            ..itemsInDb = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '');

          return object;
        }),
    Item: obx_int.EntityDefinition<Item>(
        model: _entities[1],
        toOneRelations: (Item object) => [],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(3);
          fbb.addOffset(0, descriptionOffset);
          fbb.addInt64(1, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 4, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Item(descriptionParam, idParam);

          return object;
        }),
    Person: obx_int.EntityDefinition<Person>(
        model: _entities[2],
        toOneRelations: (Person object) => [],
        toManyRelations: (Person object) => {},
        getId: (Person object) => object.id,
        setId: (Person object, int id) {
          object.id = id;
        },
        objectToFB: (Person object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final ssnOffset = fbb.writeString(object.ssn);
          final itemsInDbOffset = fbb.writeString(object.itemsInDb);
          fbb.startTable(11);
          fbb.addInt64(1, object.id);
          fbb.addOffset(7, nameOffset);
          fbb.addOffset(8, ssnOffset);
          fbb.addOffset(9, itemsInDbOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final ssnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Person(name: nameParam, ssn: ssnParam, id: idParam)
            ..itemsInDb = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '');

          return object;
        }),
    ParkingSpace: obx_int.EntityDefinition<ParkingSpace>(
        model: _entities[3],
        toOneRelations: (ParkingSpace object) => [],
        toManyRelations: (ParkingSpace object) => {},
        getId: (ParkingSpace object) => object.id,
        setId: (ParkingSpace object, int id) {
          object.id = id;
        },
        objectToFB: (ParkingSpace object, fb.Builder fbb) {
          final addressOffset = fbb.writeString(object.address);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, addressOffset);
          fbb.addInt64(2, object.pricePerHour);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pricePerHourParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ParkingSpace(
              address: addressParam,
              pricePerHour: pricePerHourParam,
              id: idParam);

          return object;
        }),
    Parking: obx_int.EntityDefinition<Parking>(
        model: _entities[4],
        toOneRelations: (Parking object) =>
            [object.vehicle, object.parkingSpace],
        toManyRelations: (Parking object) => {},
        getId: (Parking object) => object.id,
        setId: (Parking object, int id) {
          object.id = id;
        },
        objectToFB: (Parking object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.endTime?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.vehicle.targetId);
          fbb.addInt64(4, object.parkingSpace.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Parking(
              startTime: startTimeParam, endTime: endTimeParam, id: idParam);
          object.vehicle.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.vehicle.attach(store);
          object.parkingSpace.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.parkingSpace.attach(store);
          return object;
        }),
    Vehicle: obx_int.EntityDefinition<Vehicle>(
        model: _entities[5],
        toOneRelations: (Vehicle object) => [object.owner],
        toManyRelations: (Vehicle object) => {},
        getId: (Vehicle object) => object.id,
        setId: (Vehicle object, int id) {
          object.id = id;
        },
        objectToFB: (Vehicle object, fb.Builder fbb) {
          final licensePlateOffset = fbb.writeString(object.licensePlate);
          final vehicleTypeOffset = fbb.writeString(object.vehicleType);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, licensePlateOffset);
          fbb.addOffset(2, vehicleTypeOffset);
          fbb.addInt64(3, object.owner.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final licensePlateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final vehicleTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Vehicle(
              licensePlate: licensePlateParam,
              vehicleType: vehicleTypeParam,
              id: idParam);
          object.owner.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.owner.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Bag] entity fields to define ObjectBox queries.
class Bag_ {
  /// See [Bag.description].
  static final description =
      obx.QueryStringProperty<Bag>(_entities[0].properties[0]);

  /// See [Bag.id].
  static final id = obx.QueryIntegerProperty<Bag>(_entities[0].properties[1]);

  /// See [Bag.itemsInDb].
  static final itemsInDb =
      obx.QueryStringProperty<Bag>(_entities[0].properties[2]);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// See [Item.description].
  static final description =
      obx.QueryStringProperty<Item>(_entities[1].properties[0]);

  /// See [Item.id].
  static final id = obx.QueryIntegerProperty<Item>(_entities[1].properties[1]);
}

/// [Person] entity fields to define ObjectBox queries.
class Person_ {
  /// See [Person.id].
  static final id =
      obx.QueryIntegerProperty<Person>(_entities[2].properties[0]);

  /// See [Person.name].
  static final name =
      obx.QueryStringProperty<Person>(_entities[2].properties[1]);

  /// See [Person.ssn].
  static final ssn =
      obx.QueryStringProperty<Person>(_entities[2].properties[2]);

  /// See [Person.itemsInDb].
  static final itemsInDb =
      obx.QueryStringProperty<Person>(_entities[2].properties[3]);
}

/// [ParkingSpace] entity fields to define ObjectBox queries.
class ParkingSpace_ {
  /// See [ParkingSpace.id].
  static final id =
      obx.QueryIntegerProperty<ParkingSpace>(_entities[3].properties[0]);

  /// See [ParkingSpace.address].
  static final address =
      obx.QueryStringProperty<ParkingSpace>(_entities[3].properties[1]);

  /// See [ParkingSpace.pricePerHour].
  static final pricePerHour =
      obx.QueryIntegerProperty<ParkingSpace>(_entities[3].properties[2]);
}

/// [Parking] entity fields to define ObjectBox queries.
class Parking_ {
  /// See [Parking.id].
  static final id =
      obx.QueryIntegerProperty<Parking>(_entities[4].properties[0]);

  /// See [Parking.startTime].
  static final startTime =
      obx.QueryDateProperty<Parking>(_entities[4].properties[1]);

  /// See [Parking.endTime].
  static final endTime =
      obx.QueryDateProperty<Parking>(_entities[4].properties[2]);

  /// See [Parking.vehicle].
  static final vehicle =
      obx.QueryRelationToOne<Parking, Vehicle>(_entities[4].properties[3]);

  /// See [Parking.parkingSpace].
  static final parkingSpace =
      obx.QueryRelationToOne<Parking, ParkingSpace>(_entities[4].properties[4]);
}

/// [Vehicle] entity fields to define ObjectBox queries.
class Vehicle_ {
  /// See [Vehicle.id].
  static final id =
      obx.QueryIntegerProperty<Vehicle>(_entities[5].properties[0]);

  /// See [Vehicle.licensePlate].
  static final licensePlate =
      obx.QueryStringProperty<Vehicle>(_entities[5].properties[1]);

  /// See [Vehicle.vehicleType].
  static final vehicleType =
      obx.QueryStringProperty<Vehicle>(_entities[5].properties[2]);

  /// See [Vehicle.owner].
  static final owner =
      obx.QueryRelationToOne<Vehicle, Person>(_entities[5].properties[3]);
}
